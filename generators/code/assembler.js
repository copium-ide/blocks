import * as core from "./core.js";

export function exportCode() {
    const year = new Date().getFullYear();
    let script = `/*
┏┓    •       ┳┳┓┏┓
┃ ┏┓┏┓┓┓┏┏┳┓  ┃┃┃┣ 
┗┛┗┛┣┛┗┗┻┛┗┗  ┻┻┛┗┛
    ┛              
Code generated by Copium IDE in ${year}.
https://copium-ide.github.io
*/

const Copium = {
    env: {
        version: "Copium-Lite",
    },
    assets: ${JSON.stringify(core.project.project.assets || {}, null, 2)},
};
`;

    for (const author in core.modules) {
        for (const namespace in core.modules[author]) {
            const module = core.modules[author][namespace];
            if (typeof module.init === 'function') {
                script += module.init();
            }
        }
    }
    script += "\n";

    const generateCodeFromBlock = (blockData) => {
        if (blockData.hasOwnProperty('value')) {
            return JSON.stringify(blockData.value);
        }

        if (blockData.hasOwnProperty('block')) {
            const [author, namespace, func] = blockData.block.split('.');
            const blockDefinition = core.modules[author]?.[namespace]?.blocks?.[func];
            if (!blockDefinition) {
                return `/* ERROR: Block '${blockData.block}' not found. */`;
            }

            const args = {};
            for (const inputName in blockData.inputs) {
                args[inputName] = generateCodeFromBlock(blockData.inputs[inputName]);
            }
            return blockDefinition.generate(args);
        }
        return '/* Invalid block data */';
    };

    const projectScripts = core.project.project.code;
    console.log(projectScripts);
    for (let i = 0; i < projectScripts.length; i++) {
        const currentScript = projectScripts[i];
        script += `
class ${currentScript.name} {
    run() {`;

        for (let j = 0; j < currentScript.code.length; j++) {
            const block = currentScript.code[j];
            script += `
        ${generateCodeFromBlock(block)};`;
        }
        script += `
    }
}`;
    }

    if (projectScripts.length > 0) {
        script += `

function main() {`;
        for (const currentScript of projectScripts) {
            script += `
    try {
        const instance = new ${currentScript.name}();
        instance.run();
    } catch (e) {
        console.error("Error in script '${currentScript.name}':", e);
    }`;
        }
        script += `
}
main();
`;
    }

    return script;
}
